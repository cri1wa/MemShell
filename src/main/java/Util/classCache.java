package Util;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Base64;

public class classCache {

    public static String AntSwordFilterShell = "";

    public static String DynamicFilterShell = "";
    public static String path = "D:\\blog\\github\\MemShell\\target\\classes\\Shell\\";

    //输出内存马的Base64转码的class文件。
    public static void main(String[] args){
        System.out.println(Base64.getEncoder().encodeToString(getBytesByFile(path+"DynamicFilterShell.class")));
    }

    public static byte[] getBytesByFile(String pathStr) {
        File file = new File(pathStr);
        try {
            FileInputStream fis = new FileInputStream(file);
            ByteArrayOutputStream bos = new ByteArrayOutputStream(1000);
            byte[] b = new byte[1000];
            int n;
            while ((n = fis.read(b)) != -1) {
                bos.write(b, 0, n);
            }
            fis.close();
            byte[] data = bos.toByteArray();
            bos.close();
            return data;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}
